#!/bin/bash

set -euo pipefail

cNone="\033[00m"
cRed="\033[01;31m"
cGreen="\033[01;32m"

BUILDKITE_BRANCH=${BUILDKITE_BRANCH:-}
IMAGE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_OPA_IMAGE:-"openpolicyagent/opa"}
VERSION=${BUILDKITE_PLUGIN_TERRAFORM_OPA_VERSION:-"latest"}
OPA_IMAGE="${IMAGE_NAME}:${VERSION}"

# Pull the image ahead of time.
docker pull $OPA_IMAGE --quiet

function opa-bin() {
  docker run --rm -it \
    --mount "type=bind,src=$PWD,dst=/svc" \
    -w /svc \
    $OPA_IMAGE \
    "${@}"
}

function terraform-opa-run() {
  local DEBUG=${BUILDKITE_PLUGIN_TERRAFORM_OPA_DEBUG:-false}
  local FAIL_STEP=${BUILDKITE_PLUGIN_TERRAFORM_OPA_FAIL_STEP:-false}
  local TESTS_DIR=${BUILDKITE_PLUGIN_TERRAFORM_OPA_TESTS_DIR:-"terraform/tests"}
  local POLICY_FILE=${BUILDKITE_PLUGIN_TERRAFORM_OPA_POLICY_FILE:-"${TESTS_DIR}/terraform.rego"}
  local RESOURCE_TYPES_FILE=${BUILDKITE_PLUGIN_TERRAFORM_OPA_RESOURCE_TYPES_FILE:-"${TESTS_DIR}/resource_types.json"}
  local RESOURCE_WEIGHTS_FILE=${BUILDKITE_PLUGIN_TERRAFORM_OPA_RESOURCE_WEIGHTS_FILE:-"${TESTS_DIR}/resource_weights.json"}
  local SKIP_MASTER_BRANCH=${BUILDKITE_PLUGIN_TERRAFORM_OPA_SKIP_MASTER_BRANCH:-false}
  local TERRAFORM_PLAN=${BUILDKITE_PLUGIN_TERRAFORM_OPA_TERRAFORM_PLAN}

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :openpolicyagent: Debug info..."
    echo "FAIL_STEP: ${FAIL_STEP}"
    echo "OPA_IMAGE: ${OPA_IMAGE}"
    echo "POLICY_FILE: ${POLICY_FILE}"
    echo "RESOURCE_TYPES_FILE: ${RESOURCE_TYPES_FILE}"
    echo "RESOURCE_WEIGHTS_FILE: ${RESOURCE_WEIGHTS_FILE}"
    echo "TERRAFORM_PLAN: ${TERRAFORM_PLAN}"
    echo "TESTS_DIR: ${TESTS_DIR}"
    echo ""
    echo "Working directory: $(pwd)"
    echo ""
    echo "Directory contents:"
    ls -al .
    echo ""
    echo "OPA directory contents:"
    ls -al ${TESTS_DIR}
    echo ""
  fi

  echo ""
  echo "+++ :terraform: :buildkite: :openpolicyagent: Evaluating proposed Terraform changes..."
  echo ""
  echo -e "${cGreen}[!] Using Open Policy Agent version:${cNone}"
  echo "$(opa-bin version)"
  echo ""
  echo -e "${cGreen}[!] Open Policy Agent test settings:${cNone}"
  echo "Test Directory: ${TESTS_DIR}"
  echo "Policy File: ${POLICY_FILE}"
  echo "Resource Types File: ${RESOURCE_TYPES_FILE}"
  echo "Resource Weights File: ${RESOURCE_WEIGHTS_FILE}"
  echo ""

  OPA_PASS=$(opa-bin eval \
            --format pretty \
            --data resource_types:${RESOURCE_TYPES_FILE} \
            --data resource_weights:${RESOURCE_WEIGHTS_FILE} \
            --data ${POLICY_FILE} \
            --input ${TERRAFORM_PLAN} "data.terraform.analysis.authz"
  )

  OPA_SCORE=$(opa-bin eval \
            --format pretty \
            --data resource_types:${RESOURCE_TYPES_FILE} \
            --data resource_weights:${RESOURCE_WEIGHTS_FILE} \
            --data ${POLICY_FILE} \
            --input ${TERRAFORM_PLAN} "data.terraform.analysis.score"
  )

  OPA_RADIUS=$(opa-bin eval \
            --format pretty \
            --data resource_types:${RESOURCE_TYPES_FILE} \
            --data resource_weights:${RESOURCE_WEIGHTS_FILE} \
            --data ${POLICY_FILE} \
            --input ${TERRAFORM_PLAN} "data.terraform.analysis.blast_radius"
  )

  echo -e "${cGreen}----------------------------------------${cNone}"
  echo -e "${cGreen}Terraform Policy Evaluation Results:${cNone}"
  echo "Acceptable Risk Score: ${OPA_RADIUS}"
  echo "Calculated Risk Score: ${OPA_SCORE}"
  echo "Changes Compliant: ${OPA_PASS}"
  echo -e "${cGreen}----------------------------------------${cNone}"
  echo ""

  # Fail the pipeline step entirely if the option is enabled to enforce that behavior.
  if [[ $(echo ${OPA_PASS} | jq .) == false ]]; then
    if [[ "${FAIL_STEP}" == true ]]; then
      echo -e "${cRed}[!] Terraform plan does not meet the policy requirements.${cNone}"
      exit 1
    else
      echo -e "${cRed}[!] Terraform plan does not meet the policy requirements. Option to fail pipeline step is not enabled. Proceed with caution.${cNone}"
    fi
  else
    echo -e "${cGreen}[!] Terraform plan meets the policy requirements!${cNone}"
  fi

  # Add buildkite-agent meta-data regarding state of check.
  echo "${OPA_PASS}" | buildkite-agent meta-data set "tf_plan_compliant"
  echo ""
}

if [[ "${SKIP_MASTER_BRANCH}" == true && "${BUILDKITE_BRANCH}" == "master" ]]; then
  exit 0
else
  terraform-opa-run
fi
